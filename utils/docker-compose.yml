version: '3.8'

services:
  # Infrastructure Services
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      # !! IMPORTANT: For production, set these in a .env file and ensure strong passwords.
      # Example: MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_PASSWORD: admin123 # Strongly recommend changing this default
      MYSQL_INITDB_SKIP_TZINFO: "true" # Optional: Speeds up initialization
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      mintcat:
        ipv4_address: 172.21.10.6
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Security Service
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    volumes:
      - vaultwarden_data:/data
    environment:
      - WEBSOCKET_ENABLED=true
      - SIGNUPS_ALLOWED=true
      # !! IMPORTANT: Set BITWARDEN_ADMIN_TOKEN and MYSQL_BITWARDEN_PASSWORD in your .env file
      - ADMIN_TOKEN=${BITWARDEN_ADMIN_TOKEN:-changeme_admin_token} # Change 'changeme_admin_token' to a strong token
      - DATABASE_TYPE=mysql
      - DATABASE_HOST=mysql # Use service name for internal Docker network
      - DATABASE_PORT=3306
      - DATABASE_NAME=vaultwarden
      - DATABASE_USERNAME=vaultwarden # This user will need to be manually created in MySQL or via another environment variable
      - DATABASE_PASSWORD=${MYSQL_BITWARDEN_PASSWORD:-changeme_vaultwarden_db_password} # Change 'changeme_vaultwarden_db_password' to a strong password
    networks:
      mintcat:
        ipv4_address: 172.21.10.5
    depends_on:
      mysql:
        condition: service_healthy

  # Network Management
  nginx:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81" # Nginx Proxy Manager admin panel
      - "443:443"
    volumes:
      - nginx_data:/data
      - letsencrypt:/etc/letsencrypt
    networks:
      mintcat:
        ipv4_address: 172.21.10.7

  # Container Management
  portainer_ce:
    image: portainer/portainer-ce:2.21.5 # Consider using 'latest' or a specific stable version
    container_name: portainer_ce
    restart: unless-stopped
    ports:
      # - "8000:8000" # Portainer agent port (only needed if managing other environments)
      - "9443:9443" # Portainer UI HTTPS (recommended)
      # - "9000:9000" # Portainer UI HTTP (if not using HTTPS or handled by reverse proxy)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      mintcat:
        ipv4_address: 172.21.10.3

  # Operations Tools
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --schedule "0 3 * * *" # Daily check at 3 AM and cleanup
    restart: unless-stopped
    networks:
      mintcat:
        ipv4_address: 172.21.10.9

  # Development Tools
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql # Connects to the mysql service by its name
      PMA_PORT: 3306
      UPLOAD_LIMIT: 1G
      # MYSQL_ROOT_PASSWORD: admin123 # Uncomment and set if you want to allow root login via phpMyAdmin
    networks:
      mintcat:
        ipv4_address: 172.21.10.11
    # ports: # Access phpMyAdmin via Nginx Proxy Manager, so direct port mapping is often not needed.
    #   - "8080:80"

  # Network Services
  tor:
    image: dockurr/tor:latest
    container_name: tor
    restart: always
    volumes:
      - tor_config:/etc/tor
      - tor_data:/var/lib/tor
    networks:
      mintcat:
        ipv4_address: 172.21.10.2
    stop_grace_period: 1m
    # ports: # Tor typically acts as a SOCKS proxy. Expose with caution if needed externally.
    #   - "9050:9050"

  # Proxy Service
  xui:
    image: enwaiax/x-ui:alpha-zh # Note: 'alpha' versions can be unstable. Consider stable alternatives.
    container_name: xui
    volumes:
      - xui_db:/etc/x-ui
      - xui_cert:/root/cert # Path for certificates
    restart: unless-stopped
    networks:
      mintcat:
        ipv4_address: 172.21.10.8
    # ports: # x-ui panel port. Usually handled by Nginx Proxy Manager.
    #   - "54321:54321"

  # File Management Service
  alist:
    image: xhofe/alist:latest
    container_name: alist
    restart: always
    volumes:
      - alist_data:/opt/alist/data
    environment:
      - PUID=0
      - PGID=0
      - UMASK=022
      - DB_TYPE=mysql
      - DB_HOST=mysql # Connects to the mysql service by its name
      - DB_PORT=3306
      - DB_USER=alist
      - DB_PASSWORD=alist_password # Matches the password set in mysql service
      - DB_NAME=alist # Matches the database name set in mysql service
    ports: # Alist's access port. Can be exposed directly or via Nginx Proxy Manager.
      - "5244:5244"
    networks:
      mintcat:
        ipv4_address: 172.21.10.10
    depends_on:
      mysql:
        condition: service_healthy

  # DNS and Ad-blocking Service
  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    restart: unless-stopped
    volumes:
      - adguard_work:/opt/adguardhome/work
      - adguard_conf:/opt/adguardhome/conf
    ports:
      - "3000:3000" # AdGuard Home UI port
    networks:
      mintcat:
        ipv4_address: 172.21.10.12 # Assign a new, unique IP

volumes:
  mysql_data:
    driver: local
  vaultwarden_data:
    driver: local
  nginx_data:
    driver: local
  letsencrypt:
    driver: local
  portainer_data:
    driver: local
  tor_config:
    driver: local
  tor_data:
    driver: local
  xui_db:
    driver: local
  xui_cert:
    driver: local
  alist_data:
    driver: local
  adguard_work: # New volume for AdGuard Home work directory
    driver: local
  adguard_conf: # New volume for AdGuard Home configuration
    driver: local

networks:
  mintcat:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.10.0/24
        # gateway: 172.21.10.1 # Docker automatically assigns a gateway for custom bridge networks.
